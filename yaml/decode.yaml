styles:
    functions-decode:
        shaders:
            blocks:
                global: |
                    vec2 getCoord(vec2 res, float col, float row) {
                        vec2 st = fract(vec2(col,row)/res);
                        st.y = 1.-st.y;
                        return st+(vec2(.5)/res);
                    }
                    
                    float getUInt(sampler2D tex, vec2 res, float col, float row) {
                        highp vec4 value = texture2D(tex, getCoord(res,col,row));
                        return (value.x*255.)+(value.y*65025.)+(value.z*16581375.);
                    }

                    float getInt(sampler2D tex, vec2 res, float col, float row) {
                        return getUInt(tex,res,col,row)-8290688.;
                    }

                    float getUFloat(sampler2D tex, vec2 res, float col, float row) {
                        highp vec4 value = texture2D(tex, getCoord(res,col,row));
                        return ((value.x*255.)+(value.y*65025.)+(value.z*16581375.))/16581375.;
                    }

                    float getFloat(sampler2D tex, vec2 res, float col, float row) {
                        return (getUFloat(tex,res,col,row)-.5)*2.;
                    }

                    vec3 getElements(sampler2D tex, vec2 coord) {
                        highp vec4 value = texture2D(tex, coord);
                        highp float uint = (value.x*255.)+(value.y*65025.)+(value.z*16581375.);
                        float press = ceil(value.a*255.)-244.;
                        return vec3(uint, abs(press), sign(press));
                    }

                    float getNumber(sampler2D tex, vec2 res, float col, float row) {
                        highp vec3 elements = getElements(tex, getCoord(res,col,row));
                        return elements.x * pow(10.,-floor(elements.y)) * elements.z;
                    }
