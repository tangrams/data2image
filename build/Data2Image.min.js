(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/math/sign"), __esModule: true };
},{"core-js/library/fn/math/sign":6}],2:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/number/epsilon"), __esModule: true };
},{"core-js/library/fn/number/epsilon":7}],3:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":8}],4:[function(require,module,exports){
"use strict";

exports["default"] = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

exports.__esModule = true;
},{}],5:[function(require,module,exports){
"use strict";

var _Object$defineProperty = require("babel-runtime/core-js/object/define-property")["default"];

exports["default"] = (function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;

      _Object$defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
})();

exports.__esModule = true;
},{"babel-runtime/core-js/object/define-property":3}],6:[function(require,module,exports){
require('../../modules/es6.math.sign');
module.exports = require('../../modules/$.core').Math.sign;
},{"../../modules/$.core":10,"../../modules/es6.math.sign":16}],7:[function(require,module,exports){
require('../../modules/es6.number.epsilon');
module.exports = Math.pow(2, -52);
},{"../../modules/es6.number.epsilon":17}],8:[function(require,module,exports){
var $ = require('../../modules/$');
module.exports = function defineProperty(it, key, desc){
  return $.setDesc(it, key, desc);
};
},{"../../modules/$":14}],9:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],10:[function(require,module,exports){
var core = module.exports = {version: '1.2.6'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],11:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./$.a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./$.a-function":9}],12:[function(require,module,exports){
var global    = require('./$.global')
  , core      = require('./$.core')
  , ctx       = require('./$.ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && key in target;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(param){
        return this instanceof C ? new C(param) : C(param);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
  }
};
// type bitmap
$export.F = 1;  // forced
$export.G = 2;  // global
$export.S = 4;  // static
$export.P = 8;  // proto
$export.B = 16; // bind
$export.W = 32; // wrap
module.exports = $export;
},{"./$.core":10,"./$.ctx":11,"./$.global":13}],13:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],14:[function(require,module,exports){
var $Object = Object;
module.exports = {
  create:     $Object.create,
  getProto:   $Object.getPrototypeOf,
  isEnum:     {}.propertyIsEnumerable,
  getDesc:    $Object.getOwnPropertyDescriptor,
  setDesc:    $Object.defineProperty,
  setDescs:   $Object.defineProperties,
  getKeys:    $Object.keys,
  getNames:   $Object.getOwnPropertyNames,
  getSymbols: $Object.getOwnPropertySymbols,
  each:       [].forEach
};
},{}],15:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],16:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./$.export');

$export($export.S, 'Math', {sign: require('./$.math-sign')});
},{"./$.export":12,"./$.math-sign":15}],17:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./$.export');

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
},{"./$.export":12}],18:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _encode = require('./encode');

var _decode = require('./decode');

var _raster = require('./raster');

// Class

var Data2Image = (function () {
	function Data2Image(options) {
		_classCallCheck(this, Data2Image);

		this.options = options || {};
		this.elements = [];
		this.instances = 0;
	}

	_createClass(Data2Image, [{
		key: 'addElement',
		value: function addElement(name, type, populate_callback, range) {
			this.elements.push({ id: this.elements.length, name: name, type: type, range: range, fill: populate_callback });
		}
	}, {
		key: 'getTotalElements',
		value: function getTotalElements() {
			return this.elements.length;
		}
	}, {
		key: 'setTotalInstances',
		value: function setTotalInstances(number) {
			this.instances = number;
		}
	}, {
		key: 'getTotalInstances',
		value: function getTotalInstances() {
			return this.instances;
		}
	}, {
		key: 'getTableSize',
		value: function getTableSize() {
			return [this.getTotalInstances(), this.getTotalElements()];
		}
	}, {
		key: 'getUrl',
		value: function getUrl() {
			var width = this.getTotalInstances();
			var height = this.getTotalElements();

			var channels = 4;
			var rgba = new Array(width * height * channels);
			var index = undefined,
			    r = undefined,
			    i = undefined,
			    v = undefined;
			for (var y = 0; y < height; y++) {
				for (var x = 0; x < width; x++) {
					index = (y * width + x) * channels;
					v = this.elements[y].fill(x, this.elements[y]);
					var value = (0, _encode.encodeValue)(v, this.elements[y].type, this.elements[y].range);
					for (i = 0; i < channels; i++) {
						rgba[index + i] = value[i];
					}
				}
			}
			return (0, _raster.encodeRGBAtoPNG)(rgba, width, height);
		}
	}, {
		key: 'getImg',
		value: function getImg() {
			var img = document.createElement("IMG");
			img.setAttribute('src', this.getUrl());
			return img;
		}
	}, {
		key: 'version',
		value: function version() {
			return '0.0.3';
		}
	}]);

	return Data2Image;
})();

exports['default'] = Data2Image;

window.Data2Image = Data2Image;
module.exports = exports['default'];

},{"./decode":20,"./encode":21,"./raster":22,"babel-runtime/helpers/class-call-check":4,"babel-runtime/helpers/create-class":5}],19:[function(require,module,exports){
'use strict';

var _Number$EPSILON = require('babel-runtime/core-js/number/epsilon')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.clamp = clamp;
exports.map = map;
exports.decimals = decimals;

function clamp(value, min, max) {
    // return Math.max(min, Math.min(max, value)); // faster??
    return value > max ? max : value < min ? min : value;
}

function map(value, inputMin, inputMax, outputMin, outputMax) {
    var clamp = arguments.length <= 5 || arguments[5] === undefined ? true : arguments[5];

    if (Math.abs(inputMin - inputMax) < _Number$EPSILON) {
        return outputMin;
    } else {
        var outVal = (value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin;
        if (clamp) {
            if (outputMax < outputMin) {
                if (outVal < outputMax) {
                    outVal = outputMax;
                } else if (outVal > outputMin) {
                    outVal = outputMin;
                }
            } else {
                if (outVal > outputMax) {
                    outVal = outputMax;
                } else if (outVal < outputMin) {
                    outVal = outputMin;
                }
            }
        }
        return outVal;
    }
}

function decimals(number) {
    var match = (Math.abs(number) + '').match(/\d+\.(\d+)/);
    return match ? match[1].length : 0;
}

},{"babel-runtime/core-js/number/epsilon":2}],20:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.getDecodeFunctionFor = getDecodeFunctionFor;

var _encode = require('./encode');

var common = '\nvec2 getCoord(vec2 res, float col, float row) {\n    return fract(vec2(col,row+.5)/res);\n}' + '\n';

var uint = common + '\nfloat getUInt(sampler2D tex, vec2 res, float col, float row) {\n    highp vec4 value = texture2D(tex, coord);\n    return (value.x*255.)+(value.y*65025.)+(value.z*16581375.);\n}';

var ufloat = common + '\nfloat getUFloat(sampler2D tex, vec2 res, float col, float row) {\n    highp vec4 value = texture2D(tex, coord);\n    return ((value.x*255.)+(value.y*65025.)+(value.z*16581375.))/16581375.;\n}';

var position = common + '\nvec2 getPosition(sampler2D tex, vec2 res, float col, float row) {\n    vec2 coord = getCoord(res, col, row);\n    highp vec4 value = texture2D(tex, coord);\n    float x = (value.r*255+value.g*65025.)/65025.;\n    float y = (value.b*255.+value.a*65025.)/65025.;\n    return vec2(x,y);\n}' + '\n';

var color = common + '\nvec4 getColor(sampler2D tex, vec2 res, float col, float row) {\n    vec2 coord = getCoord(res, col, row);\n    return texture2D(tex, coord);\n}' + '\n';

var decode = {
    uint: uint,
    int: uint + '\nfloat getInt(sampler2D tex, vec2 res, float col, float row) {\n    return getUInt(tex,res,col,row)-8290688.;\n}',
    ufloat: ufloat,
    float: ufloat + '\nfloat getUFloat(sampler2D tex, vec2 res, float col, float row) {\n    return (getUFloat(tex,res,col,row)-.5)*2.;\n}',
    number: common + '\nvec3 getElements(sampler2D tex, vec2 coord) {\n    highp vec4 value = texture2D(tex, coord);\n    highp float uint = (value.x*255.)+(value.y*65025.)+(value.z*16581375.);\n    float press = ceil(value.a*255.)-244.;\n    return vec3(uint, abs(press), sign(press));\n}\nfloat getNumber(sampler2D tex, vec2 res, float col, float row) {\n    vec2 coord = getCoord(res, col, row);\n    highp vec3 elements = getElements(tex, coord);\n    return elements.x * pow(10.,-floor(elements.y)) * elements.z;\n}' + '\n',
    position: position,
    color: color,
    rgb: color,
    vec2: position,
    vec3: color,
    vec4: color
};

function getDecodeFunctionFor(type) {
    return decode[type];
}

window.getDecodeFunctionFor = getDecodeFunctionFor;

},{"./encode":21}],21:[function(require,module,exports){
'use strict';

var _Math$sign = require('babel-runtime/core-js/math/sign')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});
exports.getRangeFor = getRangeFor;
exports.encodeValue = encodeValue;

var _common = require('./common');

// Default Ranges
var ranges = {
	number: [-16581375, 16581375],
	char: [-128, 127],
	uchar: [0, 255],
	int: [-8290688, 8290687],
	uint: [0, 16581375],
	float: [-1, 1],
	ufloat: [0, 1],
	position: [-1, 1],
	color: [0, 255],
	rgb: [0, 255],
	vec2: [-1, 1],
	vec3: [-1, 1],
	vec4: [-1, 1]
};

function getRangeFor(type) {
	return ranges[type];
}

function clampValue(value, range) {
	if (value < range[0] || value > range[1]) {
		console.warn('Value', value, 'is out of range', range, 'will be clamped to', (0, _common.clamp)(value, range[0], range[1]));
		return (0, _common.clamp)(value, range[0], range[1]);
	} else {
		return value;
	}
}

function normalizeValue(value, range) {
	return (0, _common.map)(value, range[0], range[1], 0, 1);
}

function encodeValue(value, type, range) {
	if (!range) {
		range = getRangeFor(type);
	}

	if (typeof value === 'number') {
		value = clampValue(value, range);
		if (type !== 'number') {
			// "Number" type don't need normaliztion because tries to set the presition dinamically
			value = normalizeValue(value, range);
		}
	} else if (Array.isArray(value)) {
		for (var i in value) {
			value[i] = clampValue(value[i], range);
			if (type !== 'number') {
				// "Number" type don't need normaliztion because tries to set the presition dinamically
				value[i] = normalizeValue(value[i], range);
			}
		}
	} else {
		console.log('Value type could not be read', value, type, range);
		return;
	}

	if (type === 'uchar' || type === 'char') {
		value *= 255;
		return [Math.floor(value), Math.floor(value), Math.floor(value), 255];
	} else if (type === 'int' || type === 'uint' || type === 'float' || type === 'ufloat') {
		value = value * 16581375;
		return [Math.floor(value % 255), Math.floor(value / 255) % 255, Math.floor(value / (255 * 255)), 255];
	} else if (type === 'number') {
		var s = _Math$sign(value);
		var d = (0, _common.decimals)(value) + 1.;
		var uint = Math.abs(value) * Math.pow(10, d); // transform the number into unsigned integers
		var pres = 244 + d * s;
		// console.log("Value:",value,"S:",s,"D:",d,"Uint:",uint,"Press:",pres);
		return [Math.floor(uint) % 255, Math.floor(uint / 255) % 255, Math.floor(uint / 65025) % 255, Math.floor(pres) % 255];
	} else if (type === 'position' || type === 'vec2') {
		var x = value[0] * 65025;
		var y = value[1] * 65025;
		return [Math.floor(x % 255), Math.floor(x / 255) % 255, Math.floor(y % 255), Math.floor(y / 255) % 255];
	} else if (type === 'color' || type === 'rgb' || type === 'vec3' || type === 'vec4') {
		return [Math.floor(value[0] * 255), Math.floor(value[1] * 255), Math.floor(value[2] * 255), value[3] ? Math.floor(value[3] * 255) : 255];
	}
}

window.getRangeFor = getRangeFor;

},{"./common":19,"babel-runtime/core-js/math/sign":1}],22:[function(require,module,exports){
/**
 * @author Bei ZHANG <ikarienator@gmail.com> http://twbs.in/
 *
 * Copyright Â© 2012 Bei ZHANG <ikarienator@gmail.com>. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Bei ZHANG "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.encodeRGBAtoPNG = encodeRGBAtoPNG;
var Base64Map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

function PNGStream() {
    this.array = new Uint8Array(PNGSignature);
    this.length = this.array.length;
    this.crcStart = 0;
}

PNGStream.prototype = {

    resetCRC: function resetCRC() {
        this.crcStart = this.length;
    },

    /**
     *
     * @param w
     */
    writeByte: function writeByte(w) {
        if (this.length == this.array.length) {
            var oldArray = this.array;
            this.array = new Uint8Array(this.length * 2);
            this.array.set(oldArray, 0);
        }
        this.array[this.length++] = w;
    },

    writeBytes: function writeBytes(array) {
        var target = this.array,
            actualLength = target.length,
            length = this.length,
            acc = array.length;
        if (length + acc > actualLength) {
            while (length + acc > actualLength) {
                actualLength <<= 1;
            }
            this.array = new Uint8Array(actualLength);
            this.array.set(target, 0);
            target = this.array;
        }
        target.set(array, length);
        this.length += array.length;
    },

    /**
     *
     * @param w
     */
    writeWord: function writeWord(w) {
        this.writeByte(w >> 8);
        this.writeByte(w);
    },

    /**
     * Write a 16bit unsigned int in Lowest Significant First order.
     * @param w
     */
    writeWordLSB: function writeWordLSB(w) {
        this.writeByte(w);
        this.writeByte(w >> 8);
    },

    writeInt4: function writeInt4(w) {
        this.writeByte(w >> 24);
        this.writeByte(w >> 16);
        this.writeByte(w >> 8);
        this.writeByte(w);
    },

    writeType: function writeType(type) {
        this.writeByte(type.charCodeAt(0));
        this.writeByte(type.charCodeAt(1));
        this.writeByte(type.charCodeAt(2));
        this.writeByte(type.charCodeAt(3));
    },

    writeCRC: function writeCRC() {
        var crc = -1,
            array = this.array,
            length = this.length,
            map = PNGStream.__CRCLookupTable;

        for (var i = this.crcStart; i < length; i++) {
            crc = map[(crc ^ array[i]) & 0xff] ^ crc >> 8 & 0x00ffffff;
        }

        crc = crc ^ -1;
        this.writeInt4(crc);
    },

    /**
     * Write a general chunk.
     * @param type {String} type name
     * @param data
     */
    writeChunk: function writeChunk(type, data) {
        this.writeInt4(data.length);
        this.resetCRC();
        this.writeType(type);
        this.writeBytes(data);
        this.writeCRC();
    },

    /**
     * http://www.w3.org/TR/PNG/#11IHDR
     * @param width
     * @param height
     * @param depth
     * @param colorType
     * @param interlaceMethod {Number} 0 (no interlace, default) or 1 (Adam7 interlace)
     */
    writeIHDRChunk: function writeIHDRChunk(width, height, depth, colorType, interlaceMethod) {
        this.writeInt4(13);
        this.resetCRC();
        this.writeType("IHDR");
        if (!(width > 0)) {
            width = 1;
        }
        if (!(height > 0)) {
            height = 1;
        }
        this.writeInt4(width);
        this.writeInt4(height);

        // Available: 1, 2, 4, 8(default), 16
        this.writeByte(depth || 8);

        // Available: 0, 2, 3, 4, 6(default)
        this.writeByte(colorType === undefined ? 6 : colorType);

        // Compression Method.
        this.writeByte(0);

        // Filter Method.
        this.writeByte(0);

        // Interlace Method.
        this.writeByte(interlaceMethod);

        this.writeCRC();
    },

    /**
     * http://www.w3.org/TR/PNG/#11PLTE
     * @param depth
     * @param colorType
     * @param colors
     */
    writePLTEChunk: function writePLTEChunk(colorType, depth, colors) {
        // Calculate length
        this.writeInt4(colors.length * depth * 3 >> 3);
        this.resetCRC();
        this.writeType("PLTE");
        for (var i = 0; i < colors.length; i++) {
            this.writeByte(colors[i] >> 16);
            this.writeByte(colors[i] >> 8);
            this.writeByte(colors[i]);
        }
        this.writeCRC();
    },

    writeIDATChunk: function writeIDATChunk(data) {
        this.writeChunk("IDAT", data);
    },

    writeIENDChunk: function writeIENDChunk() {
        this.writeInt4(0);
        this.resetCRC();
        this.writeType("IEND");
        this.writeCRC();
    },

    /**
     * Return the Base64Encoding of the stream.
     * @return {String}
     */
    getBase64String: function getBase64String() {
        var a1,
            a2,
            a3,
            e3,
            e4,
            array = this.array,
            l = this.array.length,
            n = l - l % 3,
            r = [],
            k = 0;

        for (var i = 0; i < n; i += 3) {
            a1 = array[i];
            a2 = array[i + 1];
            a3 = array[i + 2];
            r.push(Base64Map.charAt(a1 >> 2) + Base64Map.charAt((a1 & 3) << 4 | a2 >> 4) + Base64Map.charAt((a2 & 0xf) << 2 | a3 >> 6) + Base64Map.charAt(a3 & 0x3f));
        }

        a1 = array[i];
        a2 = array[i + 1];
        a3 = array[i + 2];
        if (typeof a2 === 'undefined') {
            e3 = e4 = 64;
        } else {
            e3 = (a2 & 0xf) << 2 | a3 >> 6;
            if (typeof a3 === 'undefined') {
                e4 = 64;
            } else {
                e4 = a3 & 0x3f;
            }
        }
        r.push(Base64Map.charAt(a1 >> 2) + Base64Map.charAt((a1 & 3) << 4 | a2 >> 4) + Base64Map.charAt(e3) + Base64Map.charAt(e4));

        return r.join('');
    }
};

/**
 *
 * @type {Array}
 * @private
 */
PNGStream.__CRCLookupTable = (function () {
    var _crc32 = new Uint32Array(256);
    /* Create crc32 lookup table */
    for (var i = 0; i < 256; i++) {
        var c = i;
        for (var j = 0; j < 8; j++) {
            if (c & 1) {
                c = -306674912 ^ c >> 1 & 0x7fffffff;
            } else {
                c = c >> 1 & 0x7fffffff;
            }
        }
        _crc32[i] = c;
    }
    return _crc32;
})();

var PNGSignature = [137, 80, 78, 71, 13, 10, 26, 10];

function adler32(data, length) {
    // compute adler32 of output pixels + row filter bytes
    var MOD_ADLER = 65521;
    /* largest prime smaller than 65536 */
    var NMAX = 5552;
    /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */
    var a = 1;
    var b = 0;
    var n = NMAX;

    for (var i = 0; i < length; i++) {
        a += data[i];
        b += a;
        if ((n -= 1) == 0) {
            a %= MOD_ADLER;
            b %= MOD_ADLER;
            n = NMAX;
        }
    }
    a %= MOD_ADLER;
    b %= MOD_ADLER;
    return b << 16 | a;
}

/**
 * http://tools.ietf.org/html/rfc1950
 * http://tools.ietf.org/html/rfc1951 3.2.4
 * @param data
 */
function zlibNoCompression(data, length) {
    var buffer = new Uint8Array(2 + 4 + 5 * Math.ceil(length / 0xffff) + length),
        header = 8 + (7 << 4) << 8 | 3 << 6,
        continueHeader = [0, 0xff, 0xff, 0, 0],
        pos = 0,
        rest;
    header += 31 - header % 31;
    buffer[pos++] = header >> 8;
    buffer[pos++] = header;
    for (var i = 0; i + 0xffff < length; i += 0xffff) {
        buffer.set(continueHeader, pos);
        pos += 5;
        buffer.set(data.subarray(i, i + 0xffff), pos);
        pos += 0xffff;
    }
    rest = length - i;
    if (rest) {
        buffer[pos++] = 1;
        buffer[pos++] = rest & 0xff;
        buffer[pos++] = rest >> 8 & 0xff;
        rest = ~rest;
        buffer[pos++] = rest & 0xff;
        buffer[pos++] = rest >> 8 & 0xff;
        buffer.set(data.subarray(i), pos);
        pos += ~rest;
    }

    var checksum = adler32(data, length);
    buffer[pos++] = checksum >> 24;
    buffer[pos++] = checksum >> 16;
    buffer[pos++] = checksum >> 8;
    buffer[pos++] = checksum;
    return buffer;
}

function rowFilter(width, height, samples, image) {
    var result = new Uint8Array((width * samples + 1) * height),
        w = width * samples,
        pos = 0;
    for (var y = 0, j = 0; y < height; y++, j += w) {
        result[pos++] = 0;
        result.set(image.slice(j, j + w), pos);
        pos += w;
    }
    return result;
}

/**
 * Encode an RGBA list into UTF-8 PNG.
 *
 * @param image
 * @param width
 * @param height
 */

function encodeRGBAtoPNG(image, width, height) {
    var stream = new PNGStream();
    stream.writeIHDRChunk(width, height, 8, /* 8 bit depth*/6, /* True-color with alpha */0 /* No interlace */);
    image = rowFilter(width, height, 4, image);
    image = zlibNoCompression(image, image.length);
    stream.writeIDATChunk(image);
    stream.writeIENDChunk();
    return 'data:image/png;base64,' + stream.getBase64String();
}

// raster.encodeRGBAtoPNG = encodeRGBAtoPNG;

},{}]},{},[18])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
