(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/math/sign"), __esModule: true };
},{"core-js/library/fn/math/sign":5}],2:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":6}],3:[function(require,module,exports){
"use strict";

exports["default"] = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

exports.__esModule = true;
},{}],4:[function(require,module,exports){
"use strict";

var _Object$defineProperty = require("babel-runtime/core-js/object/define-property")["default"];

exports["default"] = (function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;

      _Object$defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
})();

exports.__esModule = true;
},{"babel-runtime/core-js/object/define-property":2}],5:[function(require,module,exports){
require('../../modules/es6.math.sign');
module.exports = require('../../modules/$.core').Math.sign;
},{"../../modules/$.core":8,"../../modules/es6.math.sign":14}],6:[function(require,module,exports){
var $ = require('../../modules/$');
module.exports = function defineProperty(it, key, desc){
  return $.setDesc(it, key, desc);
};
},{"../../modules/$":12}],7:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],8:[function(require,module,exports){
var core = module.exports = {version: '1.2.6'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],9:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./$.a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./$.a-function":7}],10:[function(require,module,exports){
var global    = require('./$.global')
  , core      = require('./$.core')
  , ctx       = require('./$.ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && key in target;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(param){
        return this instanceof C ? new C(param) : C(param);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
  }
};
// type bitmap
$export.F = 1;  // forced
$export.G = 2;  // global
$export.S = 4;  // static
$export.P = 8;  // proto
$export.B = 16; // bind
$export.W = 32; // wrap
module.exports = $export;
},{"./$.core":8,"./$.ctx":9,"./$.global":11}],11:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],12:[function(require,module,exports){
var $Object = Object;
module.exports = {
  create:     $Object.create,
  getProto:   $Object.getPrototypeOf,
  isEnum:     {}.propertyIsEnumerable,
  getDesc:    $Object.getOwnPropertyDescriptor,
  setDesc:    $Object.defineProperty,
  setDescs:   $Object.defineProperties,
  getKeys:    $Object.keys,
  getNames:   $Object.getOwnPropertyNames,
  getSymbols: $Object.getOwnPropertySymbols,
  each:       [].forEach
};
},{}],13:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],14:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./$.export');

$export($export.S, 'Math', {sign: require('./$.math-sign')});
},{"./$.export":10,"./$.math-sign":13}],15:[function(require,module,exports){
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _common = require('./common');

var Data2Image = (function () {
	function Data2Image(options) {
		_classCallCheck(this, Data2Image);

		this.options = options || {};
		this.elements = [];
		this.instances = 0;
	}

	_createClass(Data2Image, [{
		key: 'addElement',
		value: function addElement(name, type, populate_callback) {
			this.elements.push({ name: name, type: type, fill: populate_callback, id: this.elements.length });
		}
	}, {
		key: 'getTotalElements',
		value: function getTotalElements() {
			return this.elements.length;
		}
	}, {
		key: 'setTotalInstances',
		value: function setTotalInstances(number) {
			this.instances = number;
		}
	}, {
		key: 'getTotalInstances',
		value: function getTotalInstances() {
			return this.instances;
		}
	}, {
		key: 'getTableSize',
		value: function getTableSize() {
			return [this.getTotalInstances(), this.getTotalElements()];
		}
	}, {
		key: 'generate',
		value: function generate() {
			var width = this.getTotalInstances();
			var height = this.getTotalElements();

			var canvas = document.createElement("canvas");
			canvas.width = width;
			canvas.height = height;

			var ctx = canvas.getContext('2d');
			var imageData = ctx.createImageData(width, height);
			var data = imageData.data;
			var index = undefined,
			    y = undefined,
			    x = undefined,
			    r = undefined,
			    i = undefined;
			var channels = 4;
			var value = undefined;

			for (y = 0; y < height; y++) {
				for (x = 0; x < width; x++) {
					index = (y * width + x) * channels;
					var v = this.elements[y].fill(x, this.elements[y]);
					value = (0, _common.encodeValue)(v, this.elements[y].type);
					for (i = 0; i < channels; i++) {
						data[index + i] = value[i];
					}
				}
			}
			ctx.putImageData(imageData, 0, 0);
			return canvas;
		}
	}, {
		key: 'version',
		value: function version() {
			return '0.0.1';
		}
	}]);

	return Data2Image;
})();

exports['default'] = Data2Image;

window.getDecimals = _common.getDecimals;
window.encodeValue = _common.encodeValue;
window.Data2Image = Data2Image;
module.exports = exports['default'];

},{"./common":16,"babel-runtime/helpers/class-call-check":3,"babel-runtime/helpers/create-class":4}],16:[function(require,module,exports){
'use strict';

var _Math$sign = require('babel-runtime/core-js/math/sign')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});
exports.clamp = clamp;
exports.getDecimals = getDecimals;
exports.getRangeFor = getRangeFor;
exports.encodeValue = encodeValue;

function clamp(value, min, max) {
	// return Math.max(min, Math.min(max, value)); // faster??
	return value > max ? max : value < min ? min : value;
}

function getDecimals(number) {
	return (Math.abs(number) + '').replace('.', '').length - 1;
}

var ranges = {
	char: [-128, 127],
	uchar: [0, 255],
	int: [-8290688, 8290687],
	uint: [0, 16581375],
	float: [-1, 1],
	ufloat: [0, 1],
	lon: [-180, 180],
	lat: [-90, 90],
	number: [-16581375, 16581375],
	color: [0, 255],
	rgb: [0, 255],
	vec2: [0, 1],
	vec3: [0, 1],
	vec4: [0, 1]
};

function getRangeFor(type) {
	return ranges[type];
}

window.getRangeFor = getRangeFor;

function encodeValue(_x, _x2) {
	var _again = true;

	_function: while (_again) {
		var value = _x,
		    type = _x2;
		_again = false;

		if (value < getRangeFor(type)[0] || value > getRangeFor(type)[1]) {
			console.log('Value', value, 'of type', type, 'is out of range', getRangeFor(type), 'will be clamped to', value);
			value = clamp(value, getRangeFor(type)[0], getRangeFor(type)[1]);
		}

		if (type === 'number') {
			var s = _Math$sign(value);
			var d = getDecimals(value);
			var uint = Math.abs(value) * Math.pow(10, d); // transform the number into unsigned integers
			var pres = 128 + d * s;
			return [Math.floor(uint % 255), Math.floor(uint / 255) % 255, Math.floor(uint / (255 * 255)), 255];
		} else if (type === 'position') {
			// Values have to be normalized [-1,1]
			_x = value;
			_x2 = 'vec2';
			_again = true;
			s = d = uint = pres = undefined;
			continue _function;
		} else if (type === 'vec2') {
			var x = value[0];
			var y = value[1];
			x = .5 + x * .5;;
			y = .5 + y * .5;
			x *= 65025;
			y *= 65025;
			return [Math.floor(x % 255), Math.floor(x / 255) % 255, Math.floor(y % 255), Math.floor(y / 255) % 255];
		} else if (type === 'color') {
			// Values between [0,255]
			_x = value;
			_x2 = 'rgb';
			_again = true;
			s = d = uint = pres = x = y = undefined;
			continue _function;
		} else if (type === 'rgb' || type === 'vec3' || type === 'vec4') {
			return [Math.floor(value[0] / getRangeFor(type)[1] * 255), Math.floor(value[1] / getRangeFor(type)[1] * 255), Math.floor(value[2] / getRangeFor(type)[1] * 255), value[3] ? Math.floor(value[3] / 255) : 255];
		}
	}
}

},{"babel-runtime/core-js/math/sign":1}]},{},[15])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
